using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace YoutubeExplode.Internal.Parsers
{
    internal partial class PlayerResponseParser
    {
        private readonly JToken _root;

        public PlayerResponseParser(JToken root)
        {
            _root = root;
        }

        public string ParseAuthor() => _root.SelectToken("videoDetails.author").Value<string>();

        public string ParseChannelId() => _root.SelectToken("videoDetails.channelId").Value<string>();

        public string ParseTitle() => _root.SelectToken("videoDetails.title").Value<string>();

        public TimeSpan ParseDuration()
        {
            var durationSeconds = _root.SelectToken("videoDetails.lengthSeconds").Value<double>();
            return TimeSpan.FromSeconds(durationSeconds);
        }

        public IReadOnlyList<string> ParseKeywords() =>
            _root.SelectToken("videoDetails.keywords").EmptyIfNull().Values<string>().ToArray();

        public TimeSpan ParseStreamInfoSetExpiresIn()
        {
            var expiresInSeconds = _root.SelectToken("streamingData.expiresInSeconds").Value<double>();
            return TimeSpan.FromSeconds(expiresInSeconds);
        }

        public IEnumerable<ClosedCaptionTrackInfoParser> GetClosedCaptionTrackInfos() =>
            _root.SelectToken("captions.playerCaptionsTracklistRenderer.captionTracks").EmptyIfNull()
                .Select(t => new ClosedCaptionTrackInfoParser(t));
    }

    internal partial class PlayerResponseParser
    {
        public class ClosedCaptionTrackInfoParser
        {
            private readonly JToken _root;

            public ClosedCaptionTrackInfoParser(JToken root)
            {
                _root = root;
            }

            public string ParseUrl() => _root.SelectToken("baseUrl").Value<string>();

            public string ParseLanguageCode() => _root.SelectToken("languageCode").Value<string>();

            public string ParseLanguageName() => _root.SelectToken("name.simpleText").Value<string>();

            public bool ParseIsAutoGenerated() => _root.SelectToken("vssId").Value<string>()
                .StartsWith("a.", StringComparison.OrdinalIgnoreCase);
        }
    }
}